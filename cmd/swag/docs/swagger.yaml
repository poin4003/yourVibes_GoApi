basePath: /v1/2024
definitions:
  consts.Platform:
    enum:
    - web
    - android
    - ios
    type: string
    x-enum-varnames:
    - WEB
    - ANDROID
    - IOS
  consts.ReportType:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - USER_REPORT
    - POST_REPORT
    - COMMENT_REPORT
  request.ActivateRequest:
    properties:
      report_type:
        $ref: '#/definitions/consts.ReportType'
    type: object
  request.AdminLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.AppAuthGoogleRequest:
    properties:
      open_id:
        type: string
      platform:
        $ref: '#/definitions/consts.Platform'
      redirect_url:
        type: string
    type: object
  request.AuthGoogleRequest:
    properties:
      authorization_code:
        type: string
      platform:
        $ref: '#/definitions/consts.Platform'
      redirect_url:
        type: string
    type: object
  request.ChangeAdminPasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  request.ChangePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  request.CreateAdminRequest:
    properties:
      birthday:
        type: string
      email:
        type: string
      family_name:
        type: string
      identity_id:
        type: string
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      role:
        type: boolean
    type: object
  request.CreateAdvertiseRequest:
    properties:
      end_date:
        type: string
      post_id:
        type: string
      redirect_url:
        type: string
      start_date:
        type: string
      voucher_code:
        type: string
    required:
    - end_date
    - post_id
    - redirect_url
    - start_date
    type: object
  request.CreateCommentRequest:
    properties:
      content:
        type: string
      parent_id:
        type: string
      post_id:
        type: string
    type: object
  request.CreateConversationDetailRequest:
    properties:
      conversation_id:
        type: string
      user_id:
        type: string
    type: object
  request.CreateManyConversationDetailRequest:
    properties:
      conversation_id:
        type: string
      user_ids:
        items:
          type: string
        type: array
    type: object
  request.CreateMessageRequest:
    properties:
      content:
        type: string
      conversation_id:
        type: string
      parent_content:
        type: string
      parent_id:
        type: string
      user:
        $ref: '#/definitions/request.userDto'
    type: object
  request.ForgotAdminPasswordRequest:
    properties:
      email:
        type: string
      new_password:
        type: string
    type: object
  request.ForgotUserPasswordRequest:
    properties:
      email:
        type: string
      new_password:
        type: string
      otp:
        type: string
    type: object
  request.GetOtpForgotUserPasswordRequest:
    properties:
      email:
        type: string
    type: object
  request.HandleReportRequest:
    properties:
      report_type:
        $ref: '#/definitions/consts.ReportType'
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.RegisterRequest:
    properties:
      birthday:
        type: string
      email:
        type: string
      family_name:
        type: string
      name:
        type: string
      otp:
        type: string
      password:
        type: string
      phone_number:
        type: string
    required:
    - birthday
    - email
    - family_name
    - name
    - otp
    - password
    - phone_number
    type: object
  request.ReportRequest:
    properties:
      reason:
        type: string
      reported_id:
        type: string
      type:
        $ref: '#/definitions/consts.ReportType'
    type: object
  request.TransferOwnerRoleDto:
    properties:
      conversation_id:
        type: string
      user_id:
        type: string
    type: object
  request.UpdateAdminForSuperAdminRequest:
    properties:
      admin_id:
        type: string
      role:
        type: boolean
      status:
        type: boolean
    type: object
  request.UpdateAdminInfoRequest:
    properties:
      birthday:
        type: string
      family_name:
        type: string
      identity_id:
        type: string
      name:
        type: string
      phone_number:
        type: string
    type: object
  request.UpdateCommentRequest:
    properties:
      content:
        type: string
    type: object
  request.UpdateConversationDetail:
    properties:
      conversation_id:
        type: string
      user_id:
        type: string
    type: object
  request.VerifyEmailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  request.userDto:
    properties:
      avatar_url:
        type: string
      family_name:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
host: yourvibes.duckdns.org:8080
info:
  contact:
    email: pchuy4003@gmail.com
    name: TEAM HKTP
    url: https://github.com/poin4003/yourVibes_GoApi
  description: This is a sample YourVibes backend server
  termsOfService: https://github.com/poin4003/yourVibes_GoApi
  title: API Documentation YourVibes backend
  version: 1.0.0
paths:
  /admins:
    patch:
      consumes:
      - application/json
      description: When admin need to update info
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.UpdateAdminInfoRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: update admin
      tags:
      - admin
  /admins/:
    get:
      consumes:
      - application/json
      description: Retrieve admins based on filters
      parameters:
      - description: name to filter admins
        in: query
        name: name
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by phone number
        in: query
        name: phone_number
        type: string
      - description: Filter by identity id
        in: query
        name: identity_id
        type: string
      - description: Filter by birthday
        in: query
        name: birthday
        type: string
      - description: Filter by creation day
        in: query
        name: created_at
        type: string
      - description: Filter by status
        in: query
        name: status
        type: boolean
      - description: Filter by role
        in: query
        name: role
        type: boolean
      - description: Sort by field
        in: query
        name: sort_by
        type: string
      - description: Sort in descending order
        in: query
        name: is_descending
        type: boolean
      - description: Number of results per page
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get a list of admins
      tags:
      - super_admin
  /admins/{admin_id}:
    get:
      consumes:
      - application/json
      description: Retrieve admin by its unique ID
      parameters:
      - description: Admin ID
        in: path
        name: admin_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get admin by ID
      tags:
      - super_admin
  /admins/change_password/:
    patch:
      consumes:
      - application/json
      description: When admin need to change password
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.ChangeAdminPasswordRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: admin change password
      tags:
      - admin_auth
  /admins/login/:
    post:
      consumes:
      - application/json
      description: When user login
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.AdminLoginRequest'
      produces:
      - application/json
      responses: {}
      summary: Admin login
      tags:
      - admin_auth
  /admins/super_admin:
    patch:
      consumes:
      - application/json
      description: When super admin need to update role and status of admin
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.UpdateAdminForSuperAdminRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: update admin
      tags:
      - super_admin
    post:
      consumes:
      - application/json
      description: When super admin need to create new admin
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.CreateAdminRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Create admin
      tags:
      - super_admin
  /admins/super_admin/forgot_admin_password:
    post:
      consumes:
      - application/json
      description: When super admin change admin password
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.ForgotAdminPasswordRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Admin forgot password
      tags:
      - super_admin
  /advertise/:
    get:
      consumes:
      - application/json
      description: Get many advertise
      parameters:
      - description: post_id to filter ads
        in: query
        name: post_id
        required: true
        type: string
      - description: Limit of ads per page
        in: query
        name: limit
        type: integer
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get many advertise
      tags:
      - advertise_user
    post:
      consumes:
      - application/json
      description: When user want to create advertise by post
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.CreateAdvertiseRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Create advertise
      tags:
      - advertise_user
  /advertise/{advertise_id}:
    get:
      consumes:
      - application/json
      description: Retrieve advertise
      parameters:
      - description: Advertise ID
        in: path
        name: advertise_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get advertise detail
      tags:
      - admin_advertise_report
  /advertise/admin:
    get:
      consumes:
      - application/json
      description: Retrieve advertise base on filters
      parameters:
      - description: post id to get advertise
        in: query
        name: post_id
        type: string
      - description: Filter by status
        in: query
        name: status
        type: boolean
      - description: Filter by user email
        in: query
        name: user_email
        type: string
      - description: Filter by from date
        in: query
        name: from_date
        type: string
      - description: Filter by to date
        in: query
        name: to_date
        type: string
      - description: Filter by from price
        in: query
        name: from_price
        type: integer
      - description: Filter by to price
        in: query
        name: to_price
        type: integer
      - description: Sort by field
        in: query
        name: sort_by
        type: string
      - description: Sort in descending order
        in: query
        name: is_descending
        type: boolean
      - description: Number of results per page
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get a list of advertise
      tags:
      - admin_advertise_report
  /advertise/statistic/{advertise_id}:
    get:
      consumes:
      - application/json
      description: Retrieve advertise with statistic
      parameters:
      - description: Advertise ID
        in: path
        name: advertise_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get advertise with statistic
      tags:
      - advertise_user
  /comments/:
    get:
      consumes:
      - application/json
      description: Retrieve multiple comment filtered by various criteria.
      parameters:
      - description: Post ID to filter comment, get the first layer
        in: query
        name: post_id
        required: true
        type: string
      - description: Filter by parent id, get the next layer
        in: query
        name: parent_id
        type: string
      - description: Limit of posts per page
        in: query
        name: limit
        type: integer
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get many comment
      tags:
      - comment_user
    post:
      consumes:
      - application/json
      description: When user create comment or rep comment
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.CreateCommentRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Comment create comment
      tags:
      - comment_user
  /comments/{comment_id}:
    delete:
      consumes:
      - application/json
      description: when user want to delete comment
      parameters:
      - description: comment ID
        in: path
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: delete comment by ID
      tags:
      - comment_user
    patch:
      consumes:
      - application/json
      description: When user need to update information of comment
      parameters:
      - description: commentId
        in: path
        name: comment_id
        required: true
        type: string
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.UpdateCommentRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: update comment
      tags:
      - comment_user
  /comments/like_comment/{comment_id}:
    get:
      consumes:
      - application/json
      description: Retrieve multiple user is like comment
      parameters:
      - description: comment ID to get user like comment
        in: path
        name: comment_id
        required: true
        type: string
      - description: Limit of users per page
        in: query
        name: limit
        type: integer
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get User like comments
      tags:
      - like_comment
    post:
      consumes:
      - application/json
      description: When user like comment
      parameters:
      - description: comment ID to create like comment
        in: path
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Like comment
      tags:
      - like_comment
  /conversation_details/:
    post:
      consumes:
      - application/json
      description: When user create conversationDetail
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.CreateConversationDetailRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: ConversationDetail create ConversationDatail
      tags:
      - conversationDetail
  /conversation_details/create_many:
    post:
      consumes:
      - application/json
      description: When user create many conversationDetail
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.CreateManyConversationDetailRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Create many conversationDetail
      tags:
      - conversationDetail
  /conversation_details/delete/{user_id}/{conversation_id}:
    delete:
      consumes:
      - application/json
      description: when user delete conversationDetail
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete conversationDetail by ID
      tags:
      - conversationDetail
  /conversation_details/get_by_id:
    get:
      consumes:
      - application/json
      description: Retrieve a conversationDetail by its unique Conversation ID
      parameters:
      - description: Conversation ID
        in: query
        name: conversation_id
        required: true
        type: string
      - description: Limit on page
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get conversationDetail by Conversation Id response List User in Conversation
      tags:
      - conversationDetail
  /conversation_details/get_by_id/{userId}/{conversationId}:
    get:
      consumes:
      - application/json
      description: Retrieve a conversationDetail by its unique ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Conversation ID
        in: path
        name: conversationId
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get conversationDetail by ID
      tags:
      - conversationDetail
  /conversation_details/transfer_owner_role:
    patch:
      consumes:
      - application/json
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.TransferOwnerRoleDto'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: transfer owner role
      tags:
      - conversationDetail
  /conversation_details/update:
    patch:
      consumes:
      - application/json
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.UpdateConversationDetail'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Update conversationDetail status to false
      tags:
      - conversationDetail
  /conversations/:
    get:
      consumes:
      - application/json
      description: When user get many conversation
      parameters:
      - description: Name of the conversation
        in: query
        name: name
        type: string
      - description: Created at
        in: query
        name: created_at
        type: string
      - description: Sort by
        in: query
        name: sort_by
        type: string
      - description: Is descending
        in: query
        name: isDescending
        type: boolean
      - description: Limit of conversation per page
        in: query
        name: limit
        type: integer
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get many conversation
      tags:
      - conversation
    post:
      consumes:
      - multipart/form-data
      description: When user create conversation
      parameters:
      - description: Name of the conversation
        in: formData
        name: name
        type: string
      - description: Image of the conversation
        in: formData
        name: image
        type: file
      - collectionFormat: multi
        description: List of user IDs
        in: formData
        items:
          type: string
        name: user_ids
        required: true
        type: array
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Conversation create Conversation
      tags:
      - conversation
  /conversations/{conversation_id}:
    delete:
      consumes:
      - application/json
      description: when user want to delete conversation
      parameters:
      - description: conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: delete conversation by ID
      tags:
      - conversation
    get:
      consumes:
      - application/json
      description: Retrieve a conversation by its unique ID
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get conversation by ID
      tags:
      - conversation
    patch:
      consumes:
      - multipart/form-data
      description: When user need to update conversation
      parameters:
      - description: ConversationId
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Name of the conversation
        in: formData
        name: name
        type: string
      - description: Image of the conversation
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: update conversation
      tags:
      - conversation
  /messages/:
    post:
      consumes:
      - application/json
      description: When user create message
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.CreateMessageRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Message create Message
      tags:
      - message
  /messages/get_by_conversation_id:
    get:
      consumes:
      - application/json
      description: Retrieve messages by conversation ID
      parameters:
      - description: ConversationId
        in: query
        name: conversation_id
        required: true
        type: string
      - description: Filter by creation time
        in: query
        name: created_at
        type: string
      - description: Which column to sort by
        in: query
        name: sort_by
        type: string
      - description: Order by descending if true
        in: query
        name: is_descending
        type: boolean
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get messages by conversation ID
      tags:
      - message
  /messages/message/{message_id}:
    delete:
      consumes:
      - application/json
      description: When user delete message
      parameters:
      - description: Message ID
        in: path
        name: message_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete message by ID
      tags:
      - message
  /messages/message/{messageId}:
    get:
      consumes:
      - application/json
      description: Retrieve a message by its unique ID
      parameters:
      - description: Message ID
        in: path
        name: messageId
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get message by ID
      tags:
      - message
  /messages/ws/{user_id}:
    get:
      consumes:
      - application/json
      description: Establish a WebSocket connection for real-time messaging
      produces:
      - application/json
      responses: {}
      summary: Connect to WebSocket
      tags:
      - message
  /notification:
    get:
      consumes:
      - application/json
      parameters:
      - description: Filter notifications by sender
        in: query
        name: from
        type: string
      - description: Filter notifications by type
        in: query
        name: notification_type
        type: string
      - description: Filter notifications created at this date
        in: query
        name: created_at
        type: string
      - description: Sort notifications by this field
        in: query
        name: sort_by
        type: string
      - description: Sort notifications in descending order
        in: query
        name: isDescending
        type: boolean
      - description: Limit the number of notifications returned
        in: query
        name: limit
        type: integer
      - description: 'Pagination: page number'
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get notifications
      tags:
      - user_notification
  /notification/:
    patch:
      consumes:
      - application/json
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Update all notification status to false
      tags:
      - user_notification
  /notification/{notification_id}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Notification ID
        in: path
        name: notification_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Update notification status to false
      tags:
      - user_notification
  /notification/ws/{user_id}:
    get:
      consumes:
      - application/json
      description: Establish a WebSocket connection for real-time notifications
      produces:
      - application/json
      responses: {}
      summary: Connect to WebSocket
      tags:
      - user_notification
  /posts/:
    get:
      consumes:
      - application/json
      description: Retrieve multiple posts filtered by various criteria.
      parameters:
      - description: User ID to filter posts
        in: query
        name: user_id
        type: string
      - description: Filter by content
        in: query
        name: content
        type: string
      - description: Filter by location
        in: query
        name: location
        type: string
      - description: Filter by advertisement
        in: query
        name: is_advertisement
        type: integer
      - description: Filter by creation time
        in: query
        name: created_at
        type: string
      - description: Which column to sort by
        in: query
        name: sort_by
        type: string
      - description: Order by descending if true
        in: query
        name: isDescending
        type: boolean
      - description: Limit of posts per page
        in: query
        name: limit
        type: integer
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get many posts
      tags:
      - post_user
    post:
      consumes:
      - multipart/form-data
      description: When user create post
      parameters:
      - description: Content of the post
        in: formData
        name: content
        type: string
      - description: Privacy level
        in: formData
        name: privacy
        type: string
      - description: Location of the post
        in: formData
        name: location
        type: string
      - description: Media files for the post
        in: formData
        name: media
        type: file
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Post create post
      tags:
      - post_user
  /posts/{post_id}:
    delete:
      consumes:
      - application/json
      description: when user want to delete post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: delete post by ID
      tags:
      - post_user
    get:
      consumes:
      - application/json
      description: Retrieve a post by its unique ID
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get post by ID
      tags:
      - post_user
    patch:
      consumes:
      - multipart/form-data
      description: When user need to update information of post or update media
      parameters:
      - description: PostId
        in: path
        name: post_id
        required: true
        type: string
      - description: Post content
        in: formData
        name: content
        type: string
      - description: Post privacy
        in: formData
        name: privacy
        type: string
      - description: Post location
        in: formData
        name: location
        type: string
      - description: Array of mediaIds you want to delete
        in: formData
        name: media_ids
        type: integer
      - description: Array of media you want to upload
        in: formData
        name: media
        type: file
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: update post
      tags:
      - post_user
  /posts/like_post/{post_id}:
    get:
      consumes:
      - application/json
      description: Retrieve multiple posts filtered by various criteria.
      parameters:
      - description: Post ID to get user like post
        in: path
        name: post_id
        required: true
        type: string
      - description: Limit of posts per page
        in: query
        name: limit
        type: integer
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get User like posts
      tags:
      - like_post
    post:
      consumes:
      - application/json
      description: When user like post
      parameters:
      - description: Post ID to create like post
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Like Post
      tags:
      - like_post
  /posts/new_feeds/:
    get:
      description: Get a list of new feed
      parameters:
      - description: limit on page
        in: query
        name: limit
        type: integer
      - description: current page
        in: query
        name: page
        type: integer
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get a list of new feed
      tags:
      - post_new_feed
  /posts/new_feeds/{post_id}/:
    delete:
      description: delete new feeds
      parameters:
      - description: post_id you want to delete over your newfeed
        in: path
        name: post_id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: DeleteNewFeeds
      tags:
      - post_new_feed
  /posts/share_post/{post_id}:
    post:
      consumes:
      - multipart/form-data
      description: When user want to share post of another user post's
      parameters:
      - description: PostId
        in: path
        name: post_id
        required: true
        type: string
      - description: Content of the post
        in: formData
        name: content
        type: string
      - description: Privacy level
        in: formData
        name: privacy
        type: string
      - description: Location of the post
        in: formData
        name: location
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: share post
      tags:
      - post_share
  /posts/trending:
    get:
      consumes:
      - application/json
      description: Retrieve multiple trending posts
      parameters:
      - description: Limit of posts per page
        in: query
        name: limit
        type: integer
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get trending posts
      tags:
      - post_user
  /report:
    get:
      consumes:
      - application/json
      description: Retrieve report base on type and filter
      parameters:
      - description: type to get report
        in: query
        name: report_type
        required: true
        type: string
      - description: reason to filter report
        in: query
        name: reason
        type: string
      - description: Filter by status
        in: query
        name: status
        type: boolean
      - description: Filter by creation day
        in: query
        name: created_at
        type: string
      - description: Filter by user email
        in: query
        name: user_email
        type: string
      - description: Filter by reported user email
        in: query
        name: reported_user_email
        type: string
      - description: Filter by admin email
        in: query
        name: admin_email
        type: string
      - description: Filter by from date
        in: query
        name: from_date
        type: string
      - description: Filter by to date
        in: query
        name: to_date
        type: string
      - description: Sort by field
        in: query
        name: sort_by
        type: string
      - description: Sort in descending order
        in: query
        name: isDescending
        type: boolean
      - description: Number of results per page
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get a list of report
      tags:
      - admin_report
    post:
      consumes:
      - application/json
      description: When user need to report break our rule
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.ReportRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: report
      tags:
      - report
  /report/{report_id}:
    delete:
      consumes:
      - application/json
      description: When admin need to delete report
      parameters:
      - description: Report id
        in: path
        name: report_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: delete report
      tags:
      - admin_report
    get:
      consumes:
      - application/json
      description: Retrieve a report
      parameters:
      - description: Report ID
        in: path
        name: report_id
        required: true
        type: string
      - description: type to get report
        in: query
        name: report_type
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get report detail
      tags:
      - admin_report
  /report/activate/{report_id}:
    patch:
      consumes:
      - application/json
      description: When admin need to activate user account
      parameters:
      - description: report ID
        in: path
        name: report_id
        required: true
        type: string
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.ActivateRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: activate user account
      tags:
      - admin_report
  /report/handle_report/{report_id}:
    patch:
      consumes:
      - application/json
      description: When admin need to handle report
      parameters:
      - description: Report id
        in: path
        name: report_id
        required: true
        type: string
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.HandleReportRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: handle report
      tags:
      - admin_report
  /revenue/monthly_revenue:
    get:
      consumes:
      - application/json
      description: Get monthly revenue
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get monthly revenue
      tags:
      - revenue_admin
  /revenue/system_stats:
    get:
      consumes:
      - application/json
      description: Get system stats
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get system stats
      tags:
      - revenue_admin
  /users/:
    get:
      consumes:
      - application/json
      description: Retrieve users based on filters such as name, email, phone number,
        birthday, and created date. Supports pagination and sorting.
      parameters:
      - description: name to filter users
        in: query
        name: name
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by phone number
        in: query
        name: phone_number
        type: string
      - description: Filter by birthday
        in: query
        name: birthday
        type: string
      - description: Filter by creation day
        in: query
        name: created_at
        type: string
      - description: Sort by field
        in: query
        name: sort_by
        type: string
      - description: Sort in descending order
        in: query
        name: isDescending
        type: boolean
      - description: Number of results per page
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get a list of users
      tags:
      - user_info
    patch:
      consumes:
      - multipart/form-data
      description: Update various fields of the user profile including name, email,
        phone number, birthday, and upload avatar and capwall images.
      parameters:
      - description: User's family name
        in: formData
        name: family_name
        type: string
      - description: User's given name
        in: formData
        name: name
        type: string
      - description: User's phone number
        in: formData
        name: phone_number
        type: string
      - description: User's birthday
        in: formData
        name: birthday
        type: string
      - description: Upload user avatar image
        in: formData
        name: avatar_url
        type: file
      - description: Upload user capwall image
        in: formData
        name: capwall_url
        type: file
      - description: User privacy level
        in: formData
        name: privacy
        type: string
      - description: User biography
        in: formData
        name: biography
        type: string
      - description: 'Setting language '
        in: formData
        name: language_setting
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Update user information
      tags:
      - user_info
  /users/{userId}:
    get:
      consumes:
      - application/json
      description: Retrieve a user by its unique ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - user_info
  /users/app_auth_google/:
    post:
      consumes:
      - application/json
      description: When user need google login on mobile app
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.AppAuthGoogleRequest'
      produces:
      - application/json
      responses: {}
      summary: User app auth google
      tags:
      - user_auth
  /users/auth_google/:
    post:
      consumes:
      - application/json
      description: When user need google login
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.AuthGoogleRequest'
      produces:
      - application/json
      responses: {}
      summary: User auth google
      tags:
      - user_auth
  /users/change_password/:
    patch:
      consumes:
      - application/json
      description: When user need to change password
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.ChangePasswordRequest'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: User change password
      tags:
      - user_auth
  /users/forgot_user_password/:
    post:
      consumes:
      - application/json
      description: When user forgot and change password
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.ForgotUserPasswordRequest'
      produces:
      - application/json
      responses: {}
      summary: User forgot password
      tags:
      - user_auth
  /users/friends/{friend_id}/:
    delete:
      description: unfriend
      parameters:
      - description: User id you want to unfriend
        in: path
        name: friend_id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: unfriend
      tags:
      - user_friend
  /users/friends/{user_id}:
    get:
      description: Get a list of friend
      parameters:
      - description: User id you want to get a friend list
        in: path
        name: user_id
        required: true
        type: string
      - description: limit on page
        in: query
        name: limit
        type: integer
      - description: current page
        in: query
        name: page
        type: integer
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get a list of friend
      tags:
      - user_friend
  /users/friends/birthday/:
    get:
      description: Get a list of friend
      parameters:
      - description: limit on page
        in: query
        name: limit
        type: integer
      - description: current page
        in: query
        name: page
        type: integer
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get a list of friend by birthday
      tags:
      - user_friend
  /users/friends/friend_request:
    get:
      description: Get a list of friend request
      parameters:
      - description: limit on page
        in: query
        name: limit
        type: integer
      - description: current page
        in: query
        name: page
        type: integer
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get a list of friend request
      tags:
      - user_friend
  /users/friends/friend_request/{friend_id}/:
    delete:
      description: Undo add friend request
      parameters:
      - description: User id you want to undo add request
        in: path
        name: friend_id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Undo add friend request
      tags:
      - user_friend
    post:
      description: Send add friend request to another people
      parameters:
      - description: User id you want to send add request
        in: path
        name: friend_id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Send add friend request
      tags:
      - user_friend
  /users/friends/friend_response/{friend_id}/:
    delete:
      description: Delete friend request
      parameters:
      - description: User id you want to reject friend request
        in: path
        name: friend_id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Reject friend request
      tags:
      - user_friend
    post:
      description: Accept friend request
      parameters:
      - description: User id you want to accept friend request
        in: path
        name: friend_id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Accept friend request
      tags:
      - user_friend
  /users/friends/non_friend/:
    get:
      description: Get a list of non friend
      parameters:
      - description: limit on page
        in: query
        name: limit
        type: integer
      - description: current page
        in: query
        name: page
        type: integer
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get a list of user not your friend
      tags:
      - user_friend
  /users/friends/suggestion/:
    get:
      description: Get a list of friend
      parameters:
      - description: limit on page
        in: query
        name: limit
        type: integer
      - description: current page
        in: query
        name: page
        type: integer
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get a list of friend suggestion
      tags:
      - user_friend
  /users/get_otp_forgot_user_password/:
    post:
      consumes:
      - application/json
      description: Before forgot password
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.GetOtpForgotUserPasswordRequest'
      produces:
      - application/json
      responses: {}
      summary: User get otp forgot user password
      tags:
      - user_auth
  /users/login/:
    post:
      consumes:
      - application/json
      description: When user login
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses: {}
      summary: User login
      tags:
      - user_auth
  /users/register/:
    post:
      consumes:
      - application/json
      description: When user registration
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.RegisterRequest'
      produces:
      - application/json
      responses: {}
      summary: User Registration
      tags:
      - user_auth
  /users/verifyemail/:
    post:
      consumes:
      - application/json
      description: Before user registration
      parameters:
      - description: input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.VerifyEmailRequest'
      produces:
      - application/json
      responses: {}
      summary: User verify email
      tags:
      - user_auth
securityDefinitions:
  ApiKeyAuth:
    description: Token with 'Bearer ' prefix
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
