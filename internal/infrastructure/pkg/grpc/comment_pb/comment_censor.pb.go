// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: comment_censor.proto

package comment_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommentCensorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommentId     string                 `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommentCensorRequest) Reset() {
	*x = CommentCensorRequest{}
	mi := &file_comment_censor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentCensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentCensorRequest) ProtoMessage() {}

func (x *CommentCensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comment_censor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentCensorRequest.ProtoReflect.Descriptor instead.
func (*CommentCensorRequest) Descriptor() ([]byte, []int) {
	return file_comment_censor_proto_rawDescGZIP(), []int{0}
}

func (x *CommentCensorRequest) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *CommentCensorRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CommentCensorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CensorContent string                 `protobuf:"bytes,1,opt,name=censor_content,json=censorContent,proto3" json:"censor_content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommentCensorResponse) Reset() {
	*x = CommentCensorResponse{}
	mi := &file_comment_censor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentCensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentCensorResponse) ProtoMessage() {}

func (x *CommentCensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comment_censor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentCensorResponse.ProtoReflect.Descriptor instead.
func (*CommentCensorResponse) Descriptor() ([]byte, []int) {
	return file_comment_censor_proto_rawDescGZIP(), []int{1}
}

func (x *CommentCensorResponse) GetCensorContent() string {
	if x != nil {
		return x.CensorContent
	}
	return ""
}

var File_comment_censor_proto protoreflect.FileDescriptor

const file_comment_censor_proto_rawDesc = "" +
	"\n" +
	"\x14comment_censor.proto\x12\x0ecomment_censor\"O\n" +
	"\x14CommentCensorRequest\x12\x1d\n" +
	"\n" +
	"comment_id\x18\x01 \x01(\tR\tcommentId\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\">\n" +
	"\x15CommentCensorResponse\x12%\n" +
	"\x0ecensor_content\x18\x01 \x01(\tR\rcensorContent2s\n" +
	"\x14CommentCensorService\x12[\n" +
	"\fCheckComment\x12$.comment_censor.CommentCensorRequest\x1a%.comment_censor.CommentCensorResponseB\rZ\v/comment_pbb\x06proto3"

var (
	file_comment_censor_proto_rawDescOnce sync.Once
	file_comment_censor_proto_rawDescData []byte
)

func file_comment_censor_proto_rawDescGZIP() []byte {
	file_comment_censor_proto_rawDescOnce.Do(func() {
		file_comment_censor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_comment_censor_proto_rawDesc), len(file_comment_censor_proto_rawDesc)))
	})
	return file_comment_censor_proto_rawDescData
}

var file_comment_censor_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_comment_censor_proto_goTypes = []any{
	(*CommentCensorRequest)(nil),  // 0: comment_censor.CommentCensorRequest
	(*CommentCensorResponse)(nil), // 1: comment_censor.CommentCensorResponse
}
var file_comment_censor_proto_depIdxs = []int32{
	0, // 0: comment_censor.CommentCensorService.CheckComment:input_type -> comment_censor.CommentCensorRequest
	1, // 1: comment_censor.CommentCensorService.CheckComment:output_type -> comment_censor.CommentCensorResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_comment_censor_proto_init() }
func file_comment_censor_proto_init() {
	if File_comment_censor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_comment_censor_proto_rawDesc), len(file_comment_censor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_comment_censor_proto_goTypes,
		DependencyIndexes: file_comment_censor_proto_depIdxs,
		MessageInfos:      file_comment_censor_proto_msgTypes,
	}.Build()
	File_comment_censor_proto = out.File
	file_comment_censor_proto_goTypes = nil
	file_comment_censor_proto_depIdxs = nil
}
